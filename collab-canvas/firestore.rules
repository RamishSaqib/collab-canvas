rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for collaboration
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(projectData) {
      return isAuthenticated() && 
             projectData.createdBy == request.auth.uid;
    }
    
    function isCollaborator(projectData) {
      // Check if user ID is in the collaboratorIds array
      // This is a flat array of user IDs for efficient querying
      // For backwards compatibility, also allow if collaboratorIds doesn't exist yet
      return ('collaboratorIds' in projectData && 
              request.auth.uid in projectData.collaboratorIds);
    }
    
    function canViewProject(projectData) {
      // User can view if:
      // 1. They are the owner
      // 2. Project is public (anyone can view)
      // 3. They are a collaborator (in collaboratorIds array)
      return isAuthenticated() && (
        isOwner(projectData) ||
        projectData.isPublic == true ||
        isCollaborator(projectData)
      );
    }
    
    function isEditor(projectData) {
      return (
        ('editorIds' in projectData && request.auth.uid in projectData.editorIds) ||
        (
          // Allow by email if stored (best-effort; requires custom auth with email in token)
          'editorEmails' in projectData &&
          request.auth.token.email != null &&
          request.auth.token.email in projectData.editorEmails
        )
      );
    }

    function canEditProject(projectData) {
      // Allow editing only if user is owner or listed in editorIds
      return isOwner(projectData) || isEditor(projectData);
    }
    
    // Projects - with collaboration support
    match /projects/{projectId} {
      // Allow read for any authenticated user (they need to check if project is public)
      allow read: if isAuthenticated();
      
      // Allow create if user is setting themselves as creator
      allow create: if isAuthenticated() && 
                    request.auth.uid == request.resource.data.createdBy;
      
      // Allow update if user is owner OR user is editor (managed via editorIds/editorEmails)
      allow update: if canEditProject(resource.data) ||
                    (
                      // Allow authenticated viewers on public projects to add themselves to collaborators as viewer only
                      resource.data.isPublic == true && isAuthenticated() &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['collaborators', 'collaboratorIds', 'lastModifiedAt']) &&
                      request.resource.data.collaborators.size() == (resource.data.collaborators.size() + 1) &&
                      request.resource.data.collaboratorIds.size() == (resource.data.collaboratorIds.size() + 1)
                    );
      
      // Allow delete only if user is owner
      allow delete: if isOwner(resource.data);
      
      // Shapes within a project
      match /shapes/{shapeId} {
        // Allow read for any authenticated user who can view the project (owner, collaborator, or public)
        allow read: if isAuthenticated() && canViewProject(get(/databases/$(database)/documents/projects/$(projectId)).data);

        // Allow write only for owner or editorIds
        allow write: if isAuthenticated() && canEditProject(get(/databases/$(database)/documents/projects/$(projectId)).data);
      }
      
      // Comments within a project
      match /comments/{commentId} {
        // Simplified: Allow read/create if authenticated AND (owner OR public project)
        allow read, create: if isAuthenticated() && 
                               (get(/databases/$(database)/documents/projects/$(projectId)).data.createdBy == request.auth.uid ||
                                get(/databases/$(database)/documents/projects/$(projectId)).data.isPublic == true);
        
        // Allow update/delete if user is comment author or project owner
        allow update, delete: if isAuthenticated() && 
                              (request.auth.uid == resource.data.author.id ||
                               get(/databases/$(database)/documents/projects/$(projectId)).data.createdBy == request.auth.uid);
      }
    }
    
    // Legacy: Old canvas objects (for backward compatibility, can be removed later)
    match /canvases/{canvasId}/objects/{objectId} {
      allow read, write: if request.auth != null;
    }
    
    match /canvases/{document=**} {
      allow read, write: if request.auth != null;
    }
  }
}

